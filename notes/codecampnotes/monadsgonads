Pure Functional Programmming {
    functions more like mathematical functions...
    Programming without side-effects
    Remove assignments, loops (use recursion), freeze all array literals and object literals.
    Remove Date and Math.random

    Memoization!
        keep a table of all the results that you've seen...
        look up in the table if you've already computed what you're trying to compute again.
    Caching
        a deal with the devil.
        Can't be precise or correct at all times...inconsistent with another computation
        Okay in a system without mutation.
        Haskell.
            Immutable, but in the real world things are constantly changing.

        Monads - a loophole in the function contract.
            relax the constraints of functional language.
            Must understand haskell, category theory
            design an object such that when its methods are called, record some logging information... but can't use IO (logging statement) or mutation (append to array)
            In order to understand burritos, you must learn Spanish.
            But this isn't true....
            --you don't need to master haskell to understand monads.

            (M t) -> (t -> M u) -> (M u)

            Monads in Javascript.

            function unit(value) //takes a value, returns a monad.  AKA "Return", constructor.

            function bind(monad, function(value))

            //All 3 functions return a monad.
            //This is all it is?!
            
            Axioms.
                bind(unit(value), f) ==== f(value)
                bind(monad,unit) ==== monad
                bind(bind(monad,f),g) ==== return f(value).bind(g);

                bind(bind(monad,f), g)
                monad.bind(f).bind(g)   //AJAX, jquery, etc monad.

            bind(monad, func)   //function form
            monad.bind(func)    //method form.
            
            function MONAD() {
                return function unit(value) {
                    var monad = Object.create(null);    //create a monad
                    monad.bind = function (func) {      //include in it a bind function.
                        return func(value);
                    };
                    return monad;                       //reverything returns monads.
                };
            }

            
            
            //Sidenote....OPPORTUNITY
            Context coloring VS syntax highlighting.
            Context coloring: colored with the same color as where it was created...

            Macroids.
            --runs at the same time as the rest of your program.
            --makes it easier to make monads.

            //The identity monad:::

            var unit = MONAD();
            var monad = unit("Hello world.");
            monad.bind(alert);


            ADsafe (2007)

            var input = dom.q("input_text")
                .on('enterkey', function (e) {
                    dom.q('#ROMAN_RESULT')
                        .value(roman(input
                            .getValue()));
                    input
                        .select();
                }
            ....



            function MONAD() {
                var prototype = Object.create(null);
                function unit(value) {
                    var monad = Object.create(prototype);
                    monad.bind = function (func) {
                        return func(value);
                    };


                    return monad;
                }

                unit.method = function(name, func) {
                    prototype[name] = func;
                    return unit;
                };
                unit.lift = function(name, func) {
                    prototype[name]=function(...args) {
                        return unit(this.bind(func,args));
                    };
                    return unit;
                };


                return unit;
            }





            var ajax = MONAD()
                .lift('alert',alert);
            var monad = ajax("Hello World.");
            monad.bind(alert);
            monad.alert();

====================================

            null.  Null Pointer Exception.
            annoying! no more information to understand what went wrong......

            "Maybe" monad.
            NaN (Not a Number)


            var maybe = MONAD(function (monad, value) {
                if (value === null || value === undefined) {
                    monad.is_null = true;
                    monad.bind = function () {
                        return monad;
                    };
                }
            });

            var monad = maybe(null);
            monad.bind(alert);


====================


            Concurrency.  Doing more than one thing at one time.

            Threads are evil.

            Turn Based Processing
                single-threaded.  Race free, deadlock free.
                The law of turns:
                    Your program must: Never wait, never block, finish fast.
                Events. Message Passing. (crossedout)Threads, Mutexs.
                Web browsers work this way
                Most UI frameworks work this way
                Servers: Elko, Twisted, Nodejs.
                Problem: Asynchronicity can be hard to manage.
                    ex: steps that are dependent on eachother.

            Promises
                mechanism to manage asynchronicity
                promise represents a possible future value.
                3 states possible: pending, kept, broken.

                accept functions depending on kept or broken.
                promise.when(success,failure)
                call different functions based on 

                Make a vow.
                var my_vow = VOW.make();
                .keep(value)    //success.
                .break(reason)  //never know the answer; break the promise.
                .promise
                    .when(kept, broken) register functions that will be called either way.

                Filesystem API

                read_file(name)
                    .when(function success(string) {
                        ...
                    } , failure);

                Exceptions
                    exceptions modify the flow of control by unwinding the state.  (Backwards time travel)
                    in a turn based system, te stack is empty at the end of every turn.
                    exceptions cannot be delivered across turns
                    broken promises can.

                my_promise
                    .when(success_a)
                    .when(success_b)
                    .when(success_c, failure); //final failure function collects all the failures up to that point.

                a promise is a monad.
                value is not known when the monad is made....
                each promise is linked o two resolver functions (keep and break) which determine the promise's success and value.
                when can take two functions (bind only takes one).

                var VOW = (function () {
                    // function enqueue here...
                    // function enlighten ...

                    return {
                        make: function make() {
                            var breakers = [], fate,
                                keepers = [],   status = 'pending';

                                function herals(state,value,queue) {
                                    if(status !== 'pending') {
                                        throw "overpromise";


                            return {
                                is_promise: true
                                break: function (reason) {
                                    herald('broken',reason,breakers);
                                }
                        }
                    };
                }());   //Dog balls!


                https://github.com/douglascrockford/monad


                Hello World Monad
                Ajax Monad
                Maybe Monad
                Promise Monad

                Carl Hewitt. The Actor Model (everything you wanted to know, but were afraid to ask)

                http://channel19.msdn.com/Shows/Going+Deep/Hewitt-Meijer-and-Szyperski-The-Actor-Model-everything-you-wanted-to-know-but-were-afraid-to-ask

                Mark Miller. Securte Distributed Programming with Object-capabilities in JavaScript

                http://www.youtube.com/watch?v=w9hHHvhZ_HY
                http://www.youtube.com/watch?v=oBqeDYETXME

                jQuery implements monads.  you get a monad back, etc.... chaining.
                "defers" ==== "vow"
